error2.c
  数组打印；
python@ubuntu:~/week7/error$ cat error2.c
#include "../ch07.h"
#define N 10
int a[N],i;
int main()
{
    for(i = 0;i<N;i++)
        a[i]=i+1;
    a[N]=123456789;
    printf("i = %d\n",i);
    printf("%d\n",a[i]);
    return 0;
}
python@ubuntu:~/week7/error$ ./error2
i = 123456789
段错误 (核心已转储)
-------------------------------------------------------------------------------------------------------------------------------------------------------------
  
原因：因为数组越界，所以a[10]=123456789 占了原本i所在的内存地址，因此打印出来的i为123456789，而a[123456789]不存在，发生数组越界，未给他分配地址空间，所以发生段错误。  
程序检验：
python@ubuntu:~/week7/error$ cat errorhaha.c
#include "../ch07.h"
#define N 10
int a[N],i;
int main()
{
    for(i = 0;i<N;i++)
        a[i]=i+1;
    a[N]=123456789;
    printf("i = %d\n",i);
    printf("%d\n",a[10]);
    return 0;
}
python@ubuntu:~/week7/error$ ./errorhaha
i = 123456789
123456789

  
  
------------------------------------------------------------------------------------------------------------------------------------------------------------  
  
7-7.c
  环境变量2打印；
python@ubuntu:~/week7$ cat 7-7.c 
#include "ch07.h"
static void set_env_string(void)
{
    char test_env[]="test_env=test";
    if(putenv(test_env)!=0)
    {
        printf("Putenv is failed!\n");
    }
    printf("1.The test_env = %s\n",getenv("test_env"));
}
static void show_env_string()
{
    printf("2.The test_env = %s\n",getenv("test_env"));
}
int main()
{
    set_env_string();
    show_env_string();
    return 0;
}
python@ubuntu:~/week7$ ./7-7
1.The test_env = test
2.The test_env = (null)


--------------------------------------------------------------------------------------------------------------------------------------------------------------
注意：设置的环境仅对程序本身有效。你在程序里做的改变不会反映到外部环境中，这是因为变量的值不会从子进程传播到父进程，这样做更安全。本函数在Linux下使用仅当前函数有效，应用setenv代替。


