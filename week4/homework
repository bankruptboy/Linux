book unit1  1-6 查看你的系统的头文件limits.h。系统相关的静态限制值有哪些?它们的值各为多少?特别地，整数类型、浮点类型和双精度类型的最大、最小值各为多少?
              浮点类型的数据在float.h头文件中。并不在limits头文件中。
              带符号char：
              /* Minimum and maximum values a `signed char' can hold.  */
               #  define SCHAR_MIN	(-128)
               #  define SCHAR_MAX	127
               无符号char：
               /* Maximum value an `unsigned char' can hold.  (Minimum is 0.)  */
               #  define UCHAR_MAX	255
               带符号short：
              /* Minimum and maximum values a `signed short int' can hold.  */
               #  define SHRT_MIN	(-32768)
               #  define SHRT_MAX	32767
               无符号short：
               /* Maximum value an `unsigned short int' can hold.  (Minimum is 0.)  */
               #  define USHRT_MAX	65535
               带符号整型：
              /* Minimum and maximum values a `signed int' can hold.  */
               #  define INT_MIN	(-INT_MAX - 1)
               #  define INT_MAX	2147483647
                无符号整型：
               /* Maximum value an `unsigned int' can hold.  (Minimum is 0.)  */
               #  define UINT_MAX	4294967295U
               带符号长整型：
               /* Minimum and maximum values a `signed long int' can hold.  */
               #  if __WORDSIZE == 64
               #   define LONG_MAX	9223372036854775807L
               #  else
               #   define LONG_MAX	2147483647L
               #  endif
               #  define LONG_MIN	(-LONG_MAX - 1L)
               无符号长整形：
               /* Maximum value an `unsigned long int' can hold.  (Minimum is 0.)  */
               #  if __WORDSIZE == 64
               #   define ULONG_MAX	18446744073709551615UL
               #  else
               #   define ULONG_MAX	4294967295UL
               #  endif
               带符号长长整型：
               /* Minimum and maximum values a `signed long long int' can hold.  */
               #   define LLONG_MAX	9223372036854775807LL
               #   define LLONG_MIN	(-LLONG_MAX - 1LL)
               无符号长长整型：
               /* Maximum value an `unsigned long long int' can hold.  (Minimum is 0.)  */
               #   define ULLONG_MAX	18446744073709551615ULL
		float
		float在32位的情况下，其中1位符号位，8位指数位，23位尾数位
		有效位数 6 ~ 7
		取值范围 -(3.4 * 10 ^ 38) ～ +(3.4 * 10 ^ 38)

		double
		double在64位的情况下，其中1位符号位，11位指数位，52位尾数位
		有效位数 15 ~ 16
		取值范围 -(1.7 * 10 ^ 308) ~ +(1.7 * 10 ^ 308)

		long double
		long double在128位的情况下，其中1位符号位，64位指数位，63位尾数位
		有效位数 18 ~ 19
		取值范围 -(1.2 * 10 ^ 4932) ~ +(1.2 * 10 ^ 4932)

python@ubuntu:~$ cat /usr/include/limits.h
/* Copyright (C) 1991-2016 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with the GNU C Library; if not, see
   <http://www.gnu.org/licenses/>.  */

/*
 *	ISO C99 Standard: 7.10/5.2.4.2.1 Sizes of integer types	<limits.h>
 */

#ifndef _LIBC_LIMITS_H_
#define _LIBC_LIMITS_H_	1

#include <features.h>


/* Maximum length of any multibyte character in any locale.
   We define this value here since the gcc header does not define
   the correct value.  */
#define MB_LEN_MAX	16


/* If we are not using GNU CC we have to define all the symbols ourself.
   Otherwise use gcc's definitions (see below).  */
#if !defined __GNUC__ || __GNUC__ < 2

/* We only protect from multiple inclusion here, because all the other
   #include's protect themselves, and in GCC 2 we may #include_next through
   multiple copies of this file before we get to GCC's.  */
# ifndef _LIMITS_H
#  define _LIMITS_H	1

#include <bits/wordsize.h>

/* We don't have #include_next.
   Define ANSI <limits.h> for standard 32-bit words.  */

/* These assume 8-bit `char's, 16-bit `short int's,
   and 32-bit `int's and `long int's.  */

/* Number of bits in a `char'.	*/
#  define CHAR_BIT	8

/* Minimum and maximum values a `signed char' can hold.  */
#  define SCHAR_MIN	(-128)
#  define SCHAR_MAX	127

/* Maximum value an `unsigned char' can hold.  (Minimum is 0.)  */
#  define UCHAR_MAX	255

/* Minimum and maximum values a `char' can hold.  */
#  ifdef __CHAR_UNSIGNED__
#   define CHAR_MIN	0
#   define CHAR_MAX	UCHAR_MAX
#  else
#   define CHAR_MIN	SCHAR_MIN
#   define CHAR_MAX	SCHAR_MAX
#  endif

/* Minimum and maximum values a `signed short int' can hold.  */
#  define SHRT_MIN	(-32768)
#  define SHRT_MAX	32767

/* Maximum value an `unsigned short int' can hold.  (Minimum is 0.)  */
#  define USHRT_MAX	65535

/* Minimum and maximum values a `signed int' can hold.  */
#  define INT_MIN	(-INT_MAX - 1)
#  define INT_MAX	2147483647

/* Maximum value an `unsigned int' can hold.  (Minimum is 0.)  */
#  define UINT_MAX	4294967295U

/* Minimum and maximum values a `signed long int' can hold.  */
#  if __WORDSIZE == 64
#   define LONG_MAX	9223372036854775807L
#  else
#   define LONG_MAX	2147483647L
#  endif
#  define LONG_MIN	(-LONG_MAX - 1L)

/* Maximum value an `unsigned long int' can hold.  (Minimum is 0.)  */
#  if __WORDSIZE == 64
#   define ULONG_MAX	18446744073709551615UL
#  else
#   define ULONG_MAX	4294967295UL
#  endif

#  ifdef __USE_ISOC99

/* Minimum and maximum values a `signed long long int' can hold.  */
#   define LLONG_MAX	9223372036854775807LL
#   define LLONG_MIN	(-LLONG_MAX - 1LL)

/* Maximum value an `unsigned long long int' can hold.  (Minimum is 0.)  */
#   define ULLONG_MAX	18446744073709551615ULL

#  endif /* ISO C99 */

# endif	/* limits.h  */
#endif	/* GCC 2.  */

#endif	/* !_LIBC_LIMITS_H_ */

 /* Get the compiler's limits.h, which defines almost all the ISO constants.

    We put this #include_next outside the double inclusion check because
    it should be possible to include this file more than once and still get
    the definitions from gcc's header.  */
#if defined __GNUC__ && !defined _GCC_LIMITS_H_
/* `_GCC_LIMITS_H_' is what GCC's file defines.  */
# include_next <limits.h>
#endif

/* The <limits.h> files in some gcc versions don't define LLONG_MIN,
   LLONG_MAX, and ULLONG_MAX.  Instead only the values gcc defined for
   ages are available.  */
#if defined __USE_ISOC99 && defined __GNUC__
# ifndef LLONG_MIN
#  define LLONG_MIN	(-LLONG_MAX-1)
# endif
# ifndef LLONG_MAX
#  define LLONG_MAX	__LONG_LONG_MAX__
# endif
# ifndef ULLONG_MAX
#  define ULLONG_MAX	(LLONG_MAX * 2ULL + 1)
# endif
#endif

#ifdef	__USE_POSIX
/* POSIX adds things to <limits.h>.  */
# include <bits/posix1_lim.h>
#endif

#ifdef	__USE_POSIX2
# include <bits/posix2_lim.h>
#endif

#ifdef	__USE_XOPEN
# include <bits/xopen_lim.h>
#endif










python@ubuntu:/usr/include$ sudo find /usr -name float.h
/usr/include/c++/5/tr1/float.h
/usr/lib/gcc/x86_64-linux-gnu/5/include/float.h
python@ubuntu:/usr/include$ cat /usr/lib/gcc/x86_64-linux-gnu/5/include/float.h
/* Copyright (C) 2002-2015 Free Software Foundation, Inc.

This file is part of GCC.

GCC is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 3, or (at your option)
any later version.

GCC is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

Under Section 7 of GPL version 3, you are granted additional
permissions described in the GCC Runtime Library Exception, version
3.1, as published by the Free Software Foundation.

You should have received a copy of the GNU General Public License and
a copy of the GCC Runtime Library Exception along with this program;
see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
<http://www.gnu.org/licenses/>.  */

/*
 * ISO C Standard:  5.2.4.2.2  Characteristics of floating types <float.h>
 */

#ifndef _FLOAT_H___
#define _FLOAT_H___

/* Radix of exponent representation, b. */
#undef FLT_RADIX
#define FLT_RADIX	__FLT_RADIX__

/* Number of base-FLT_RADIX digits in the significand, p.  */
#undef FLT_MANT_DIG
#undef DBL_MANT_DIG
#undef LDBL_MANT_DIG
#define FLT_MANT_DIG	__FLT_MANT_DIG__
#define DBL_MANT_DIG	__DBL_MANT_DIG__
#define LDBL_MANT_DIG	__LDBL_MANT_DIG__

/* Number of decimal digits, q, such that any floating-point number with q
   decimal digits can be rounded into a floating-point number with p radix b
   digits and back again without change to the q decimal digits,

	p * log10(b)			if b is a power of 10
	floor((p - 1) * log10(b))	otherwise
*/
#undef FLT_DIG
#undef DBL_DIG
#undef LDBL_DIG
#define FLT_DIG		__FLT_DIG__
#define DBL_DIG		__DBL_DIG__
#define LDBL_DIG	__LDBL_DIG__

/* Minimum int x such that FLT_RADIX**(x-1) is a normalized float, emin */
#undef FLT_MIN_EXP
#undef DBL_MIN_EXP
#undef LDBL_MIN_EXP
#define FLT_MIN_EXP	__FLT_MIN_EXP__
#define DBL_MIN_EXP	__DBL_MIN_EXP__
#define LDBL_MIN_EXP	__LDBL_MIN_EXP__

/* Minimum negative integer such that 10 raised to that power is in the
   range of normalized floating-point numbers,

	ceil(log10(b) * (emin - 1))
*/
#undef FLT_MIN_10_EXP
#undef DBL_MIN_10_EXP
#undef LDBL_MIN_10_EXP
#define FLT_MIN_10_EXP	__FLT_MIN_10_EXP__
#define DBL_MIN_10_EXP	__DBL_MIN_10_EXP__
#define LDBL_MIN_10_EXP	__LDBL_MIN_10_EXP__

/* Maximum int x such that FLT_RADIX**(x-1) is a representable float, emax.  */
#undef FLT_MAX_EXP
#undef DBL_MAX_EXP
#undef LDBL_MAX_EXP
#define FLT_MAX_EXP	__FLT_MAX_EXP__
#define DBL_MAX_EXP	__DBL_MAX_EXP__
#define LDBL_MAX_EXP	__LDBL_MAX_EXP__

/* Maximum integer such that 10 raised to that power is in the range of
   representable finite floating-point numbers,

	floor(log10((1 - b**-p) * b**emax))
*/
#undef FLT_MAX_10_EXP
#undef DBL_MAX_10_EXP
#undef LDBL_MAX_10_EXP
#define FLT_MAX_10_EXP	__FLT_MAX_10_EXP__
#define DBL_MAX_10_EXP	__DBL_MAX_10_EXP__
#define LDBL_MAX_10_EXP	__LDBL_MAX_10_EXP__

/* Maximum representable finite floating-point number,

	(1 - b**-p) * b**emax
*/
#undef FLT_MAX
#undef DBL_MAX
#undef LDBL_MAX
#define FLT_MAX		__FLT_MAX__
#define DBL_MAX		__DBL_MAX__
#define LDBL_MAX	__LDBL_MAX__

/* The difference between 1 and the least value greater than 1 that is
   representable in the given floating point type, b**1-p.  */
#undef FLT_EPSILON
#undef DBL_EPSILON
#undef LDBL_EPSILON
#define FLT_EPSILON	__FLT_EPSILON__
#define DBL_EPSILON	__DBL_EPSILON__
#define LDBL_EPSILON	__LDBL_EPSILON__

/* Minimum normalized positive floating-point number, b**(emin - 1).  */
#undef FLT_MIN
#undef DBL_MIN
#undef LDBL_MIN
#define FLT_MIN		__FLT_MIN__
#define DBL_MIN		__DBL_MIN__
#define LDBL_MIN	__LDBL_MIN__

/* Addition rounds to 0: zero, 1: nearest, 2: +inf, 3: -inf, -1: unknown.  */
/* ??? This is supposed to change with calls to fesetround in <fenv.h>.  */
#undef FLT_ROUNDS
#define FLT_ROUNDS 1

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
/* The floating-point expression evaluation method.
        -1  indeterminate
         0  evaluate all operations and constants just to the range and
            precision of the type
         1  evaluate operations and constants of type float and double
            to the range and precision of the double type, evaluate
            long double operations and constants to the range and
            precision of the long double type
         2  evaluate all operations and constants to the range and
            precision of the long double type

   ??? This ought to change with the setting of the fp control word;
   the value provided by the compiler assumes the widest setting.  */
#undef FLT_EVAL_METHOD
#define FLT_EVAL_METHOD	__FLT_EVAL_METHOD__

/* Number of decimal digits, n, such that any floating-point number in the
   widest supported floating type with pmax radix b digits can be rounded
   to a floating-point number with n decimal digits and back again without
   change to the value,

	pmax * log10(b)			if b is a power of 10
	ceil(1 + pmax * log10(b))	otherwise
*/
#undef DECIMAL_DIG
#define DECIMAL_DIG	__DECIMAL_DIG__

#endif /* C99 */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
/* Versions of DECIMAL_DIG for each floating-point type.  */
#undef FLT_DECIMAL_DIG
#undef DBL_DECIMAL_DIG
#undef LDBL_DECIMAL_DIG
#define FLT_DECIMAL_DIG		__FLT_DECIMAL_DIG__
#define DBL_DECIMAL_DIG		__DBL_DECIMAL_DIG__
#define LDBL_DECIMAL_DIG	__DECIMAL_DIG__

/* Whether types support subnormal numbers.  */
#undef FLT_HAS_SUBNORM
#undef DBL_HAS_SUBNORM
#undef LDBL_HAS_SUBNORM
#define FLT_HAS_SUBNORM		__FLT_HAS_DENORM__
#define DBL_HAS_SUBNORM		__DBL_HAS_DENORM__
#define LDBL_HAS_SUBNORM	__LDBL_HAS_DENORM__

/* Minimum positive values, including subnormals.  */
#undef FLT_TRUE_MIN
#undef DBL_TRUE_MIN
#undef LDBL_TRUE_MIN
#define FLT_TRUE_MIN	__FLT_DENORM_MIN__
#define DBL_TRUE_MIN	__DBL_DENORM_MIN__
#define LDBL_TRUE_MIN	__LDBL_DENORM_MIN__

#endif /* C11 */

#ifdef __STDC_WANT_DEC_FP__
/* Draft Technical Report 24732, extension for decimal floating-point
   arithmetic: Characteristic of decimal floating types <float.h>.  */

/* Number of base-FLT_RADIX digits in the significand, p.  */
#undef DEC32_MANT_DIG
#undef DEC64_MANT_DIG
#undef DEC128_MANT_DIG
#define DEC32_MANT_DIG	__DEC32_MANT_DIG__
#define DEC64_MANT_DIG	__DEC64_MANT_DIG__
#define DEC128_MANT_DIG	__DEC128_MANT_DIG__

/* Minimum exponent. */
#undef DEC32_MIN_EXP
#undef DEC64_MIN_EXP
#undef DEC128_MIN_EXP
#define DEC32_MIN_EXP	__DEC32_MIN_EXP__
#define DEC64_MIN_EXP	__DEC64_MIN_EXP__
#define DEC128_MIN_EXP	__DEC128_MIN_EXP__

/* Maximum exponent. */
#undef DEC32_MAX_EXP
#undef DEC64_MAX_EXP
#undef DEC128_MAX_EXP
#define DEC32_MAX_EXP	__DEC32_MAX_EXP__
#define DEC64_MAX_EXP	__DEC64_MAX_EXP__
#define DEC128_MAX_EXP	__DEC128_MAX_EXP__

/* Maximum representable finite decimal floating-point number
   (there are 6, 15, and 33 9s after the decimal points respectively). */
#undef DEC32_MAX
#undef DEC64_MAX
#undef DEC128_MAX
#define DEC32_MAX   __DEC32_MAX__
#define DEC64_MAX   __DEC64_MAX__
#define DEC128_MAX  __DEC128_MAX__

/* The difference between 1 and the least value greater than 1 that is
   representable in the given floating point type. */
#undef DEC32_EPSILON
#undef DEC64_EPSILON
#undef DEC128_EPSILON
#define DEC32_EPSILON	__DEC32_EPSILON__
#define DEC64_EPSILON	__DEC64_EPSILON__
#define DEC128_EPSILON	__DEC128_EPSILON__

/* Minimum normalized positive floating-point number. */
#undef DEC32_MIN
#undef DEC64_MIN
#undef DEC128_MIN
#define DEC32_MIN	__DEC32_MIN__
#define DEC64_MIN	__DEC64_MIN__
#define DEC128_MIN	__DEC128_MIN__

/* Minimum subnormal positive floating-point number. */
#undef DEC32_SUBNORMAL_MIN
#undef DEC64_SUBNORMAL_MIN
#undef DEC128_SUBNORMAL_MIN
#define DEC32_SUBNORMAL_MIN       __DEC32_SUBNORMAL_MIN__
#define DEC64_SUBNORMAL_MIN       __DEC64_SUBNORMAL_MIN__
#define DEC128_SUBNORMAL_MIN      __DEC128_SUBNORMAL_MIN__

/* The floating-point expression evaluation method.
         -1  indeterminate
         0  evaluate all operations and constants just to the range and
            precision of the type
         1  evaluate operations and constants of type _Decimal32 
	    and _Decimal64 to the range and precision of the _Decimal64 
            type, evaluate _Decimal128 operations and constants to the 
	    range and precision of the _Decimal128 type;
	 2  evaluate all operations and constants to the range and
	    precision of the _Decimal128 type.  */

#undef DEC_EVAL_METHOD
#define DEC_EVAL_METHOD	__DEC_EVAL_METHOD__

#endif /* __STDC_WANT_DEC_FP__ */

#endif /* _FLOAT_H___ */


以上对浮点类型的数值定义在gcc的默认宏定义中，所以需要去查看gcc的默认编译宏


python@ubuntu:/usr/include$ gcc -posix -E -dM - </dev/null
#define __SSP_STRONG__ 3
#define __DBL_MIN_EXP__ (-1021)
#define __UINT_LEAST16_MAX__ 0xffff
#define __ATOMIC_ACQUIRE 2
#define __FLT_MIN__ 1.17549435082228750797e-38F
#define __GCC_IEC_559_COMPLEX 2
#define __UINT_LEAST8_TYPE__ unsigned char
#define __SIZEOF_FLOAT80__ 16
#define __INTMAX_C(c) c ## L
#define __CHAR_BIT__ 8
#define __UINT8_MAX__ 0xff
#define __WINT_MAX__ 0xffffffffU
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __SIZE_MAX__ 0xffffffffffffffffUL
#define __WCHAR_MAX__ 0x7fffffff
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 1
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 1
#define __DBL_DENORM_MIN__ ((double)4.94065645841246544177e-324L)
#define __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 1
#define __GCC_ATOMIC_CHAR_LOCK_FREE 2
#define __GCC_IEC_559 2
#define __FLT_EVAL_METHOD__ 0
#define __unix__ 1
#define __GCC_ATOMIC_CHAR32_T_LOCK_FREE 2
#define __x86_64 1
#define __UINT_FAST64_MAX__ 0xffffffffffffffffUL
#define __SIG_ATOMIC_TYPE__ int
#define __DBL_MIN_10_EXP__ (-307)
#define __FINITE_MATH_ONLY__ 0
#define __GNUC_PATCHLEVEL__ 0
#define __UINT_FAST8_MAX__ 0xff
#define __has_include(STR) __has_include__(STR)
#define __DEC64_MAX_EXP__ 385
#define __INT8_C(c) c
#define __UINT_LEAST64_MAX__ 0xffffffffffffffffUL
#define __SHRT_MAX__ 0x7fff
#define __LDBL_MAX__ 1.18973149535723176502e+4932L
#define __UINT_LEAST8_MAX__ 0xff
#define __GCC_ATOMIC_BOOL_LOCK_FREE 2
#define __UINTMAX_TYPE__ long unsigned int
#define __linux 1
#define __DEC32_EPSILON__ 1E-6DF
#define __unix 1
#define __UINT32_MAX__ 0xffffffffU
#define __LDBL_MAX_EXP__ 16384
#define __WINT_MIN__ 0U
#define __linux__ 1
#define __SCHAR_MAX__ 0x7f
#define __WCHAR_MIN__ (-__WCHAR_MAX__ - 1)
#define __INT64_C(c) c ## L
#define __DBL_DIG__ 15
#define __GCC_ATOMIC_POINTER_LOCK_FREE 2
#define _POSIX_SOURCE 1
#define __SIZEOF_INT__ 4
#define __SIZEOF_POINTER__ 8
#define __USER_LABEL_PREFIX__ 
#define __STDC_HOSTED__ 1
#define __LDBL_HAS_INFINITY__ 1
#define __FLT_EPSILON__ 1.19209289550781250000e-7F
#define __LDBL_MIN__ 3.36210314311209350626e-4932L
#define __STDC_UTF_16__ 1
#define __DEC32_MAX__ 9.999999E96DF
#define __INT32_MAX__ 0x7fffffff
#define __SIZEOF_LONG__ 8
#define __STDC_IEC_559__ 1
#define __STDC_ISO_10646__ 201505L
#define __UINT16_C(c) c
#define __DECIMAL_DIG__ 21
#define __gnu_linux__ 1
#define __has_include_next(STR) __has_include_next__(STR)
#define __LDBL_HAS_QUIET_NAN__ 1
#define __GNUC__ 5
#define __MMX__ 1
#define __FLT_HAS_DENORM__ 1
#define __SIZEOF_LONG_DOUBLE__ 16
#define __BIGGEST_ALIGNMENT__ 16
#define __DBL_MAX__ ((double)1.79769313486231570815e+308L)
#define __INT_FAST32_MAX__ 0x7fffffffffffffffL
#define __DBL_HAS_INFINITY__ 1
#define __DEC32_MIN_EXP__ (-94)
#define __INT_FAST16_TYPE__ long int
#define __LDBL_HAS_DENORM__ 1
#define __DEC128_MAX__ 9.999999999999999999999999999999999E6144DL
#define __INT_LEAST32_MAX__ 0x7fffffff
#define __DEC32_MIN__ 1E-95DF
#define __DBL_MAX_EXP__ 1024
#define __DEC128_EPSILON__ 1E-33DL
#define __SSE2_MATH__ 1
#define __ATOMIC_HLE_RELEASE 131072
#define __PTRDIFF_MAX__ 0x7fffffffffffffffL
#define __amd64 1
#define __STDC_NO_THREADS__ 1
#define __ATOMIC_HLE_ACQUIRE 65536
#define __LONG_LONG_MAX__ 0x7fffffffffffffffLL
#define __SIZEOF_SIZE_T__ 8
#define __SIZEOF_WINT_T__ 4
#define __GCC_HAVE_DWARF2_CFI_ASM 1
#define __GXX_ABI_VERSION 1009
#define __FLT_MIN_EXP__ (-125)
#define __INT_FAST64_TYPE__ long int
#define __DBL_MIN__ ((double)2.22507385850720138309e-308L)
#define __LP64__ 1
#define __DECIMAL_BID_FORMAT__ 1
#define __DEC128_MIN__ 1E-6143DL
#define __REGISTER_PREFIX__ 
#define __UINT16_MAX__ 0xffff
#define __DBL_HAS_DENORM__ 1
#define __UINT8_TYPE__ unsigned char
#define __NO_INLINE__ 1
#define __FLT_MANT_DIG__ 24
#define __VERSION__ "5.4.0 20160609"
#define __UINT64_C(c) c ## UL
#define _STDC_PREDEF_H 1
#define __GCC_ATOMIC_INT_LOCK_FREE 2
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __STDC_IEC_559_COMPLEX__ 1
#define __INT32_C(c) c
#define __DEC64_EPSILON__ 1E-15DD
#define __ORDER_PDP_ENDIAN__ 3412
#define __DEC128_MIN_EXP__ (-6142)
#define __INT_FAST32_TYPE__ long int
#define __UINT_LEAST16_TYPE__ short unsigned int
#define unix 1
#define __INT16_MAX__ 0x7fff
#define __SIZE_TYPE__ long unsigned int
#define __UINT64_MAX__ 0xffffffffffffffffUL
#define __INT8_TYPE__ signed char
#define __ELF__ 1
#define __FLT_RADIX__ 2
#define __INT_LEAST16_TYPE__ short int
#define __LDBL_EPSILON__ 1.08420217248550443401e-19L
#define __UINTMAX_C(c) c ## UL
#define __SSE_MATH__ 1
#define __k8 1
#define __SIG_ATOMIC_MAX__ 0x7fffffff
#define __GCC_ATOMIC_WCHAR_T_LOCK_FREE 2
#define __SIZEOF_PTRDIFF_T__ 8
#define __x86_64__ 1
#define __DEC32_SUBNORMAL_MIN__ 0.000001E-95DF
#define __INT_FAST16_MAX__ 0x7fffffffffffffffL
#define __UINT_FAST32_MAX__ 0xffffffffffffffffUL
#define __UINT_LEAST64_TYPE__ long unsigned int
#define __FLT_HAS_QUIET_NAN__ 1
#define __FLT_MAX_10_EXP__ 38
#define __LONG_MAX__ 0x7fffffffffffffffL
#define __DEC128_SUBNORMAL_MIN__ 0.000000000000000000000000000000001E-6143DL
#define __FLT_HAS_INFINITY__ 1
#define __UINT_FAST16_TYPE__ long unsigned int
#define __DEC64_MAX__ 9.999999999999999E384DD
#define __CHAR16_TYPE__ short unsigned int
#define __PRAGMA_REDEFINE_EXTNAME 1
#define __INT_LEAST16_MAX__ 0x7fff
#define __DEC64_MANT_DIG__ 16
#define __INT64_MAX__ 0x7fffffffffffffffL
#define __UINT_LEAST32_MAX__ 0xffffffffU
#define __GCC_ATOMIC_LONG_LOCK_FREE 2
#define __INT_LEAST64_TYPE__ long int
#define __INT16_TYPE__ short int
#define __INT_LEAST8_TYPE__ signed char
#define __STDC_VERSION__ 201112L
#define __DEC32_MAX_EXP__ 97
#define __INT_FAST8_MAX__ 0x7f
#define __INTPTR_MAX__ 0x7fffffffffffffffL
#define linux 1
#define __SSE2__ 1
#define __LDBL_MANT_DIG__ 64
#define __DBL_HAS_QUIET_NAN__ 1
#define __SIG_ATOMIC_MIN__ (-__SIG_ATOMIC_MAX__ - 1)
#define __code_model_small__ 1
#define __k8__ 1
#define __INTPTR_TYPE__ long int
#define __UINT16_TYPE__ short unsigned int
#define __WCHAR_TYPE__ int
#define __SIZEOF_FLOAT__ 4
#define __UINTPTR_MAX__ 0xffffffffffffffffUL
#define __DEC64_MIN_EXP__ (-382)
#define __INT_FAST64_MAX__ 0x7fffffffffffffffL
#define __GCC_ATOMIC_TEST_AND_SET_TRUEVAL 1
#define __FLT_DIG__ 6
#define __UINT_FAST64_TYPE__ long unsigned int
#define __INT_MAX__ 0x7fffffff
#define __amd64__ 1
#define __INT64_TYPE__ long int
#define __FLT_MAX_EXP__ 128
#define __ORDER_BIG_ENDIAN__ 4321
#define __DBL_MANT_DIG__ 53
#define __SIZEOF_FLOAT128__ 16
#define __INT_LEAST64_MAX__ 0x7fffffffffffffffL
#define __GCC_ATOMIC_CHAR16_T_LOCK_FREE 2
#define __DEC64_MIN__ 1E-383DD
#define __WINT_TYPE__ unsigned int
#define __UINT_LEAST32_TYPE__ unsigned int
#define __SIZEOF_SHORT__ 2
#define __SSE__ 1
#define __LDBL_MIN_EXP__ (-16381)
#define __INT_LEAST8_MAX__ 0x7f
#define __SIZEOF_INT128__ 16
#define __LDBL_MAX_10_EXP__ 4932
#define __ATOMIC_RELAXED 0
#define __DBL_EPSILON__ ((double)2.22044604925031308085e-16L)
#define _LP64 1
#define __UINT8_C(c) c
#define __INT_LEAST32_TYPE__ int
#define __SIZEOF_WCHAR_T__ 4
#define __UINT64_TYPE__ long unsigned int
#define __INT_FAST8_TYPE__ signed char
#define __GNUC_STDC_INLINE__ 1
#define __DBL_DECIMAL_DIG__ 17
#define __STDC_UTF_32__ 1
#define __FXSR__ 1
#define __DEC_EVAL_METHOD__ 2
#define __UINT32_C(c) c ## U
#define __INTMAX_MAX__ 0x7fffffffffffffffL
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLT_DENORM_MIN__ 1.40129846432481707092e-45F
#define __INT8_MAX__ 0x7f
#define __UINT_FAST32_TYPE__ long unsigned int
#define __CHAR32_TYPE__ unsigned int
#define __FLT_MAX__ 3.40282346638528859812e+38F
#define __INT32_TYPE__ int
#define __SIZEOF_DOUBLE__ 8
#define __FLT_MIN_10_EXP__ (-37)
#define __INTMAX_TYPE__ long int
#define __DEC128_MAX_EXP__ 6145
#define __ATOMIC_CONSUME 1
#define __GNUC_MINOR__ 4
#define __UINTMAX_MAX__ 0xffffffffffffffffUL
#define __DEC32_MANT_DIG__ 7
#define __DBL_MAX_10_EXP__ 308
#define __LDBL_DENORM_MIN__ 3.64519953188247460253e-4951L
#define __INT16_C(c) c
#define __STDC__ 1
#define __PTRDIFF_TYPE__ long int
#define __ATOMIC_SEQ_CST 5
#define __UINT32_TYPE__ unsigned int
#define __UINTPTR_TYPE__ long unsigned int
#define __DEC64_SUBNORMAL_MIN__ 0.000000000000001E-383DD
#define __DEC128_MANT_DIG__ 34
#define __LDBL_MIN_10_EXP__ (-4931)
#define __SIZEOF_LONG_LONG__ 8
#define __GCC_ATOMIC_LLONG_LOCK_FREE 2
#define __LDBL_DIG__ 18
#define __FLT_DECIMAL_DIG__ 9
#define __UINT_FAST16_MAX__ 0xffffffffffffffffUL
#define __GCC_ATOMIC_SHORT_LOCK_FREE 2
#define __UINT_FAST8_TYPE__ unsigned char
#define __ATOMIC_ACQ_REL 4
#define __ATOMIC_RELEASE 3








为了方便起见，下面是CSDN中对浮点数一些范围与宏值的总结。






float
float在32位的情况下，其中1位符号位，8位指数位，23位尾数位
有效位数 6 ~ 7
取值范围 -(3.4 * 10 ^ 38) ～ +(3.4 * 10 ^ 38)

double
double在64位的情况下，其中1位符号位，11位指数位，52位尾数位
有效位数 15 ~ 16
取值范围 -(1.7 * 10 ^ 308) ~ +(1.7 * 10 ^ 308)

long double
long double在128位的情况下，其中1位符号位，64位指数位，63位尾数位
有效位数 18 ~ 19
取值范围 -(1.2 * 10 ^ 4932) ~ +(1.2 * 10 ^ 4932)

清楚了浮点数的表示我们来看看float.h里面的内容吧，其实float.h主要定义了一些和浮点数有关系的限制，其中的FLT代表float，DBL代表double，LDBL代表long double，主要有如下进制

指数的默认进制
FLT_RADIX 默认值是2，表示指数是以2进制表示

尾数的位数
FLT_MANT_DIG 默认值是23，表示float类型的变量尾数的位数是23位
DBL_MANT_DIG 默认值是52，表示double类型的变量尾数的位数是52位
LDBL_MANT_DIG 默认值是63，表示long double类型的变量尾数的位数是63位

小数点后的位数，就是四舍五入后肯定能保证的精度
FLT_DIG 默认值是6，表示float类型的变量小数点后的位数是6位
DBL_DIG 默认值是15，表示double类型的变量小数点后的位数是15位
LDBL_DIG 默认值是18，表示long double类型的变量小数点后的位数是18位

指数的最小整数
FLT_MIN_EXP 默认值是-125
DBL_MIN_EXP 默认值是-1021
LDBL_MIN_EXP 默认值是-16381

指数的最小负整数
FLT_MIN_10_EXP 默认值是-37
DBL_MIN_10_EXP 默认值是-307
LDBL_MIN_10_EXP 默认值是-4931

指数的最大整数
FLT_MAX_EXP 默认值是128
DBL_MAX_EXP 默认值是1024
LDBL_MAX_EXP 默认值是16384

指数的最大非负整数
FLT_MAX_10_EXP 默认值是38
DBL_MAX_10_EXP 默认值是308
LDBL_MAX_10_EXP 默认值是4932

最大值
FLT_MAX 默认值是3.4 * 10 ^ 38
DBL_MAX 默认值是1.7 * 10 ^ 308
LDBL_MAX 默认值是1.2 * 10 ^ 4932

跨度值
FLT_EPSILON 默认值是0
DBL_EPSILON 默认值是0
LDBL_EPSILON 默认值是0

最小的正数
FLT_MIN 默认值是0
DBL_MIN 默认值是0
LDBL_MIN 默认值是0

四舍五入的方式
FLT_ROUNDS，0代表向0，1代表向最近的，2代表向正无穷，3代表向负无穷，-1代表不确定

/* float.h
Defines implementation specific macros for dealing with　floating point.
*/
#ifndef __FLOAT_H　
#define __FLOAT_H
#if !defined( __DEFS_H )　
#include <_defs.h>　
#endif
#define FLT_RADIX 2　
#define FLT_ROUNDS 1　
#define FLT_GUARD 1　
#define FLT_NORMALIZE 1
#define DBL_DIG 15　
#define FLT_DIG 6　
#define LDBL_DIG 19
#define DBL_MANT_DIG 53　
#define FLT_MANT_DIG 24　
#define LDBL_MANT_DIG 64
#define DBL_EPSILON 2.2204460492503131E-16　
#define FLT_EPSILON 1.19209290E-07F　
#define LDBL_EPSILON 1.084202172/*河蟹*/485504E-19/* smallest positive IEEE normal numbers */　
#define DBL_MIN 2.2250738585072014E-308　
#define FLT_MIN 1.17549435E-38F　
#define LDBL_MIN _tiny_ldble
#define DBL_MAX _huge_dble　
#define FLT_MAX _huge_flt　
#define LDBL_MAX _huge_ldble
#define DBL_MAX_EXP +1024　
#define FLT_MAX_EXP +128　
#define LDBL_MAX_EXP +16384
#define DBL_MAX_10_EXP +308　
#define FLT_MAX_10_EXP +38　
#define LDBL_MAX_10_EXP +4932
#define DBL_MIN_10_EXP -307　
#define FLT_MIN_10_EXP -37　
#define LDBL_MIN_10_EXP -4931
#define DBL_MIN_EXP -1021　
#define FLT_MIN_EXP -125　
#define LDBL_MIN_EXP -16381
extern float _Cdecl _huge_flt;　
extern double _Cdecl _huge_dble;　
extern long double _Cdecl _huge_ldble;　
extern long double _Cdecl _tiny_ldble;
#ifdef __cplusplus　
extern "C" {　
#endif　
unsigned int _Cdecl _clear87(void);　
unsigned int _Cdecl _control87(unsigned int __newcw, unsigned int __mask);　
void _Cdecl _fpreset(void);　
unsigned int _Cdecl _status87(void);　
#ifdef __cplusplus　
}　
#endif
#if !__STDC__
/* 8087/80287 Status Word format */
#define SW_INVALID 0x0001 /* Invalid operation */　
#define SW_DENORMAL 0x0002 /* Denormalized operand */　
#define SW_ZERODIVIDE 0x0004 /* Zero divide */　
#define SW_OVERFLOW 0x0008 /* Overflow */　
#define SW_UNDERFLOW 0x0010 /* Underflow */　
#define SW_INEXACT 0x0020 /* Precision (Inexact result) */
/* 8087/80287 Control Word format */
#define MCW_EM 0x003f /* interrupt Exception Masks*/　
#define EM_INVALID 0x0001 /* invalid */　
#define EM_DENORMAL 0x0002 /* denormal */　
#define EM_ZERODIVIDE 0x0004 /* zero divide */　
#define EM_OVERFLOW 0x0008 /* overflow */　
#define EM_UNDERFLOW 0x0010 /* underflow */　
#define EM_INEXACT 0x0020 /* inexact (precision) */
#define MCW_IC 0x1000 /* Infinity Control */　
#define IC_AFFINE 0x1000 /* affine */　
#define IC_PROJECTIVE 0x0000 /* projective */
#define MCW_RC 0x0c00 /* Rounding Control */　
#define RC_CHOP 0x0c00 /* chop */　
#define RC_UP 0x0800 /* up */　
#define RC_DOWN 0x0400 /* down */　
#define RC_NEAR 0x0000 /* near */
#define MCW_PC 0x0300 /* Precision Control */　
#define PC_24 0x0000 /* 24 bits */　
#define PC_53 0x0200 /* 53 bits */　
#define PC_64 0x0300 /* 64 bits */
/* 8087/80287 Initial Control Word */　
/* use affine infinity, mask underflow and precision exceptions */
#define CW_DEFAULT _default87　
extern unsigned int _Cdecl _default87;
/*　SIGFPE signal error types (for integer & float exceptions).　*/　
#define FPE_INTOVFLOW 126 /* 80x86 Interrupt on overflow */　
#define FPE_INTDIV0 127 /* 80x86 Integer divide by zero */
#define FPE_INVALID 129 /* 80x87 invalid operation */　
#define FPE_ZERODIVIDE 131 /* 80x87 divide by zero */　
#define FPE_OVERFLOW 132 /* 80x87 arithmetic overflow */　
#define FPE_UNDERFLOW 133 /* 80x87 arithmetic underflow */　
#define FPE_INEXACT 134 /* 80x87 precision loss */　
#define FPE_STACKFAULT 135 /* 80x87 stack overflow */　
#define FPE_EXPLICITGEN 140 /* When SIGFPE is raise()'d */
/*　SIGSEGV signal error types.　*/　
#define SEGV_BOUND 10 /* A BOUND violation (SIGSEGV) */　
#define SEGV_EXPLICITGEN 11 /* When SIGSEGV is raise()'d */
/*　SIGILL signal error types.　*/　
#define ILL_EXECUTION 20 /* Illegal operation exception */　
#define ILL_EXPLICITGEN 21 /* When SIGILL is raise()'d */
#endif /* !__STDC__ */
#endif



#include <stdio.h>

int main() {
    int int_n = 0;
    unsigned int u_int_n = 0;
    // int float_n = 0;
    long long double_n = 0;

    while (1) {
        int_n <<= 1;
        int_n += 1;
        // printf("%d\n", int_n);
        if (int_n == -1) break;
        printf("%d\n", int_n);
    }
    printf("-- int 最大值如上 --\n\n");

    while (1) {
        u_int_n <<= 1;
        u_int_n += 1;
        printf("%u\n", u_int_n);
        if ((int)u_int_n == -1) break;
    }
    printf("-- unsigned int 最大值如上 --\n\n");

    float float_n = -8.25;
    char *tmp = (char *)&float_n;
    *tmp = 0xff;
    *(tmp + 1) = 0xff;
    *(tmp + 2) = 0x7f;
    *(tmp + 3) = 0x7f;

    printf("\n&f = %x", &float_n);
	printf("\n最大float： f = %f", float_n);

    *tmp = 0x01;
    *(tmp + 1) = 0x00;
    *(tmp + 2) = 0x00;
    *(tmp + 3) = 0x00;

    printf("\n&f = %x", &float_n);
	printf("\n最小float： f = %e", float_n);

    return 0;
}




























unit2  2-7 编写程序说明gets()函数的危险性。
     
     
python@ubuntu:~$ vi gets.c
python@ubuntu:~$ gcc gets.c -o gets
gets.c: In function ‘main’:
gets.c:16:5: warning: implicit declaration of function ‘gets’ [-Wimplicit-function-declaration]
     gets(buffer.buf);
     ^
/tmp/cczaow6C.o：在函数‘main’中：
gets.c:(.text+0x58): 警告： the `gets' function is dangerous and should not be used.
python@ubuntu:~$ ./gets
please enter a line
abcdefghijk
gets() get string "abcdefghijk"
buffer.others is "ijk"
python@ubuntu:~$ cat gets.c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define BUF_SIZE 8

int main(void)
{
    FILE *fd;
    int fgets_yes;
    struct iobuf {
        char buf[BUF_SIZE];
        char others[BUF_SIZE];
    }buffer;
    memset(&buffer,'\0',sizeof(struct iobuf)); 
    fprintf(stdout,"please enter a line\n");
    gets(buffer.buf);
    fprintf(stdout,"gets() get string \"%s\"\n",buffer.buf);
    /* 查看溢出情况 */
    fprintf(stdout,"buffer.others is \"%s\"\n",buffer.others);
    exit(0);
}


     
     
     
     
2-10 设某个文件含n个记录，文件的第一个字(4字节）给出记录的总个数n，随后的n个字给出各个记录的长度（字节数)，剩余部分则由各个记录组成。
     编写一个根据文件指针和记录编号（从Ⅰ开始编号）读取第k个记录的函数。
python@ubuntu:~/week5$ vi aaa.c
python@ubuntu:~/week5$ gcc aaa.c -o aaa
python@ubuntu:~/week5$ ./aaa
1
C Pr
python@ubuntu:~/week5$ ./aaa
2
og
python@ubuntu:~/week5$ cat aaa.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
void fun(char *str)
{
	char *str_c=str;
	int i,j=0;
	for(i=0;str[i]!='\0';i++)
	{
		if(str[i]!=' ')
			str_c[j++]=str[i];
	}
	str_c[j]='\0';
	str=str_c;	
}

void findljj(FILE *fp,int i)
{
	char str[60];
	char buffer[20];
	char buf[100];
	int b = 0;//某数前面数据的长度
	//读出数据的个数 
	fseek(fp , 0 ,SEEK_SET);
    fread(buffer, 1, 1, fp);
    
  	int n; //数据个数 
    sscanf(buffer,"%d",&n);    
    
    //读出数据的长度 
	fseek(fp , 4 ,SEEK_SET);
    fread(buf, sizeof(buf), 1, fp);
    fun(buf);
	for(int l = 0;l<i-1;l++)
	{
		b=buf[l]+b-'0';		
	//	printf("%d\n",b);
	}

    //读出第i个数据的内容 
    fseek(fp , (n+1)*4+b ,SEEK_SET);
	if(fgets (str, (int)(buf[i-1]-'0')+1, fp)!=NULL ) {
    	puts(str);
   }
   else{
   	  printf("error");
   }
}
int main ()
{
   FILE *fp;
   fp = fopen("file.txt","w+");
   int i; //第几个数据  
   scanf("%d",&i); 
   //写入数据 
   fputs("2   ", fp);  
   fseek( fp, 0, SEEK_CUR );
   fputs("4   ", fp); 
   fseek(fp , 0 ,SEEK_CUR);
   fputs("2   ", fp);
   fseek(fp , 0 ,SEEK_CUR);
   fputs("C Programming Langauge", fp);
      
   findljj(fp,i);
   fclose(fp);
   
   return 0;
}
