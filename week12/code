python@ubuntu:~/Linux/week13$ cat *.c *.h
#include "ch.h"
void write_data(FILE *stream)
{
    int i;
    for(i=0;i<50;i++)
    {
        fprintf(stream,"line %2d\n",i);
        if(ferror(stream))
            err_exit("Output to stream failed!");
    }
}
int main(void)
{
    FILE *output;
    output = popen("more -10","w");
    if(!output)
       err_exit("Could not run more!");
    write_data(output);
    pclose(output);
    return 0;
}#include "ch.h"
int main(void)
{
    int fifo_fd, n, total_bytes = 0;
    char readbuf[PIPE_BUF];
    /*如果FIFO不存在，创建它*/
    if (access(FIFO_FILE, F_OK) == -1)
        if (mkfifo(FIFO_FILE, 0666) != 0)
        {
            printf("Could not create fifo %s\n", FIFO_FILE);
            exit(0);
        }
    if ((fifo_fd = open(FIFO_FILE, O_RDONLY)) < 0)
    {
        printf("Could not open fifo %s n", FIFO_FILE);
        exit(EXIT_FAILURE);
    }
    printf("Process %d opened: %s\n", getpid(), FIFO_FILE);
    while ((n = read(fifo_fd, readbuf, PIPE_BUF)) > 0)
    {
        printf("%d received %d bytes\n", getpid(), n);
        total_bytes += n;
    }
    close(fifo_fd);
    printf("Process %d received total %d bytes \n", getpid(), total_bytes);
    return 0;
}
#include "ch.h"
int main(void)
{
    int fifo_fd, n, total_bytes = 0;
    char sendbuf[PIPE_BUF];
    if ((fifo_fd = open(FIFO_FILE, O_WRONLY)) < 0)
    {
        printf("Could not open fifo %s n", FIFO_FILE);
        exit(EXIT_FAILURE);
    }
    printf("Process %d opened: %s \n", getpid(), FIFO_FILE);
    do
    {
        if ((n = write(fifo_fd, sendbuf, PIPE_BUF)) == -1)
            err_exit("FIFO broken");
        printf("%d write %d bytes\n", getpid(),n);
        total_bytes += n;
    } while (total_bytes < TEN_MEG);
    close(fifo_fd);
    printf("Process %d finished\n", getpid());
    return 0;
}#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <stdlib.h>
#include <time.h>
#include <dlfcn.h>
#include <setjmp.h>
#include <wait.h>
#include <errno.h>

#define PIPE_BUF 100
#define FIFO_FILE "./testfifo"
#define TEN_MEG 1000
#define INFILE "./in.txt"
#define OUTFILE "./out.txt"
#define MODE S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH
void err_exit(char *s)
{
    printf("Usage : *s is faile!\n");
    exit(1);
}
python@ubuntu:~/Linux/week13$ cat 13-4-*.c
#include "ch.h"
int main()
{
    int server_fifo_fd, client_fifo_fd;
    struct data_to_pass my_request;
    char client_fifo_name[256];
    pid_t mypid;

    server_fifo_fd = open(SERVER_FIFO_NAME, O_WRONLY);
    if (server_fifo_fd == -1)
        err_exit("Sorry, no server");

    mypid = getpid();
    sprintf(client_fifo_name, CLIENT_FIFO_NAME, mypid);
    if (mkfifo(client_fifo_name, 0777) == -1)
        err_exit(client_fifo_name);

    while (1)
    {
        printf("Enter your request:");
        memset(my_request.data, 0, BUFFER_SIZE);
        fgets(my_request.data, BUFFER_SIZE, stdin);
        if (strcmp(my_request.data, "bye\n") == 0 || strcmp(my_request.data, "BYE\n") == 0)
            break;

        my_request.client_pid = mypid;

        write(server_fifo_fd, &my_request, sizeof(my_request));
        client_fifo_fd = open(client_fifo_name, O_RDONLY);
        if (client_fifo_fd != -1)
        {
            if (read(client_fifo_fd, &my_request, sizeof(my_request)) > 0)
            {
                printf("---I get answer: %s\n", my_request.data);
            }
            close(client_fifo_fd);
        }
    }
    close(server_fifo_fd);
    //unlink(CLIENT_FIFO_NAME);
    unlink(client_fifo_name);
    return 0;
}#include "ch.h"
int main()
{
        int server_fifo_fd, client_fifo_fd;
        struct data_to_pass my_data;
        int nbytes;
        int y = 0;
        char client_fifo_name[256], *tmp_char_ptr;

        mkfifo(SERVER_FIFO_NAME, 0777);
        server_fifo_fd = open(SERVER_FIFO_NAME, O_RDONLY);
        if (server_fifo_fd == -1)
                err_exit("Server fifo failure");
        do
        {
                memset(my_data.data,0,sizeof(my_data.data)); 
                nbytes = read(server_fifo_fd, &my_data, sizeof(my_data));
                if (nbytes > 0)
                {
                        tmp_char_ptr = my_data.data;
                        while (*tmp_char_ptr)
                        {
                                if (isupper(*tmp_char_ptr))
                                        *tmp_char_ptr = tolower(*tmp_char_ptr);
                                else if (islower(*tmp_char_ptr))
                                        *tmp_char_ptr = toupper(*tmp_char_ptr);
                                else if (*tmp_char_ptr == '\n')
                                        *tmp_char_ptr = '\0';
                                tmp_char_ptr++;
                        }
                        printf("data from client: %s\n", my_data.data);
                        sprintf(client_fifo_name, CLIENT_FIFO_NAME, my_data.client_pid);
                        printf("client name: %s\n",client_fifo_name);
                        client_fifo_fd = open(client_fifo_name, O_WRONLY);
                        if (client_fifo_fd != -1)
                        {
                                write(client_fifo_fd, &my_data, sizeof(my_data));
                                printf("y = %d\n",y++);
                                close(client_fifo_fd);
                        }
                }

        } while (nbytes > 0);
        close(server_fifo_fd);
        unlink(SERVER_FIFO_NAME);
        return 0;
}
